(def true (java.lang.Boolean.parseBoolean "true"))
(def false (java.lang.Boolean.parseBoolean "false"))
(def newLine 
'
'
)

(def doc (getDoc))

(def -se 
	(.getEngineByName
		 (new 'javax.script.ScriptEngineManager') "JavaScript"))

(doc 
(/cal:express 
	(.eval -se express))

`(cal 1+2+4)
7
`)		 


(def -out (. 'java.lang.System.out'))

(doc
(/println:*strs 
	(.println -out (str *strs)))
	
`(println 1 2 'str')
12str\n
`
)
	
(doc
(/print:*strs 
	(.println -out (str *strs)))

`(print 1 2 'str')
12str
`
)

(doc
(/str:*objs
	(join objs))
	
`(str 1 'str')
1str
`
)

(doc
(/join:objs:obj
	(def sb (new 'java.lang.StringBuilder'))
	(foreach objs
		(/:item
			(if (and (def? obj) (? (.length sb) 0i false true))
				(.append sb	
					(java.lang.String.valueOf (as 'java.lang.Object' obj))))
			(.append sb 
				(java.lang.String.valueOf (as 'java.lang.Object' item)))))
	(.toString sb))

'(join [1 2 3] "+")
1+2+3
'
)

(/not:boolean
	(if boolean
		false
		true))

(/time:sub:*args
	(if (not (def? sub))
		(return (java.lang.System.currentTimeMillis)))
	(def time1 (time))
	(def value)
	(if (def? args)
		(share value (sub *args))
		(share value (sub)))
	
	(def time2 (time))
	(println (cal `{time2} - {time1}`))
	
	value
)


(/comp:a:b
	(def res (str (cal `{a} - {b}`)))
	(? (.substring res 0i 1i)
		"-" -1
		"0" 0
		1))

(/>:a:b
	(? (comp a b)
		1 true
		false))
		
(/=:a:b
	(? (comp a b)
		0 true
		false))		

(/<:a:b
	(? (comp a b)
		-1 true
		false))
	
(/<=:a:b
	(? (comp a b)
		-1 true
		0 true
		false))
		
(/>=:a:b
	(? (comp a b)
		1 true
		0 true
		false))
	
(/asObj:obj
	(as 'java.lang.Object' obj))	


(/getDoc
	(def docMap {})
	(/doc:key:*value
		(if (def? key)
			(if (def? value)
				(.put docMap (asObj key)
					(asObj (str key newLine (join value newLine))))
				(.get docMap (asObj key)))
			(.keySet docMap))))
	
	
(export
/asObj
/getDoc
/comp
/println
/time
/cal
/str
true
false
/join
/print
/>
/<
/=
/>=
/<=
newLine
doc
)










