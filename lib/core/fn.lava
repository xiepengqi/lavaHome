(use 'core.const')

(def doc (getDoc))

(def -se 
	(.getEngineByName
		 (new 'javax.script.ScriptEngineManager') "JavaScript"))

(doc
(/cal:express 
	(.eval -se express))

`(cal 1+2+4)
7
`)		 


(def -out (. (str System '.out')))

(doc
(/println:*strs 
	(.println -out (str *strs)))
	
`(println 1 2 'str')
12str\n
`
)
	
(doc
(/print:*strs 
	(.println -out (str *strs)))

`(print 1 2 'str')
12str
`
)

(doc
(/str:*objs
	(join objs))
	
`(str 1 'str')
1str
`
)

(doc
(/join:objs:obj
	(def sb (new StringBuilder))
	(foreach objs
		(/:item
			(if (and (def? obj) (? (.length sb) 0i false true))
				(.append sb	
					(java.lang.String.valueOf (as Object obj))))
			(.append sb 
				(java.lang.String.valueOf (as Object item)))))
	(.toString sb))

'(join [1 2 3] "+")
1+2+3
'
)

(/not:boolean
	(if boolean
		false
		true))

(/time:sub:*args
	(if (not (def? sub))
		(return (java.lang.System.currentTimeMillis)))
	(def time1 (time))
	(def value)
	(if (def? args)
		(share value (sub *args))
		(share value (sub)))
	
	(def time2 (time))
	(println (cal `{time2} - {time1}`))
	
	value
)


(/comp:a:b
	(def res (str (cal `{a} - {b}`)))
	(? (.substring res 0i 1i)
		"-" -1
		"0" 0
		1))

(/>:a:b
	(? (comp a b)
		1 true
		false))
		
(/=:a:b
	(? (comp a b)
		0 true
		false))		

(/<:a:b
	(? (comp a b)
		-1 true
		false))
	
(/<=:a:b
	(? (comp a b)
		-1 true
		0 true
		false))
		
(/>=:a:b
	(? (comp a b)
		1 true
		0 true
		false))
	
(/asObj:obj
	(as 'java.lang.Object' obj))	

(/exit:status
    (if (not (def? status))
        (def status 0i))
    (java.lang.System.exit status))

(/getDoc
	(def docMap {})
	(/doc:key:*value
	    'doc for function or text'
		(if (def? key)
			(if (def? value)
				(.put docMap (asObj key)
					(asObj (str key newLine (join value newLine))))
				(.get docMap (asObj key)))
			(.keySet docMap))))


(/inf:obj:className
    'like java keyword instanceof

    (inf #anyObjecct# #a String of class full name#)
    return Boolean

    '
    (ext.fn.Inf.inf (as 'java.lang.Object' obj) (as 'java.lang.Object' className)))


(/getClipboardText
    "获取系统剪贴板内容"
    (ext.fn.ClipboardText.getSysClipboardText))
(/setClipboardText
       "设置系统剪贴板内容"
       (ext.fn.ClipboardText.setSysClipboardText $0))

(/eq
    (as 'java.lang.Object' $0 $1)
    (.equals $0 $1))

(/bl
    (if (def? $0)
        (if (share? $0 null)
            false
            (if (inf $0 'java.lang.String')
                (do
                    (as 'java.lang.String' $0)
                    (if (> (.length $0) 0)
                        true
                        false))
                (if (inf $0 'java.util.Collection')
                    (do
                        (as 'java.util.Collection' $0)
                        (if (> (.size $0) 0)
                             true
                             false))
                    (if (inf $0 'java.util.Map')
                        (do
                             (as 'java.util.Map' $0)
                              (if (> (.size $0) 0)
                                    true
                                    false))
                        (if (inf $0 'java.lang.Boolean')
                            $0
                            true)))))
        false))

(/len
    (if (not (def? $0)) (throw (newRuntimeException "can not get len from undefined")))
    (if (inf $0 'java.lang.String')
        (do
            (as 'java.lang.String' $0)
            (str (.length $0)))
        (if (inf $0 'java.util.Collection')
            (do
                (as 'java.util.Collection' $0)
                (str (.size $0)))
            (if (inf $0 'java.util.Map')
                (do
                     (as 'java.util.Map' $0)
                     (str (.size $0)))
                (throw (newRuntimeException "can not get len from this object"))))))

(/do $-1)

(/newStrBuilder
    (if (def? $0)
        (new 'java.lang.StringBuilder' $0)
        (new 'java.lang.StringBuilder')))

(/newRuntimeException
    (if (def? $0)
        (new 'java.lang.RuntimeException' $0)
        (new 'java.lang.RuntimeException')))

(/parseInt
    (if (inf $0 'java.lang.String')
        (java.lang.Integer.parseInt (as $0))
        $0))

(/asInt:arg
	(as int arg))		
		
(/subList
    (.subList $0 $1 $2))

(/sort:arr
    (if (not (def? arr))
        (return))
    (for (/:i
        (for (/:j
            (if (> (get arr j) (get arr (+ j 1)))
                (do
                    (def temp (get arr j))
                    (set arr j (get arr (+ j 1)))
                    (set arr (+ j 1) temp)))) 
			0 (- (len arr) (+ i 2))))
		0 (- (len arr) 2))
    arr)

(/get
    (if (def? $1)
        (if (inf $0 "java.util.Map")
            (.get $0 (as "java.lang.Object" $1))
            (if (inf $0 "java.util.List")
                (.get $0 (parseInt $1))))))

(/set
    (if (< (len $args) 3)
        (throw (newRuntimeException "set need at least two args")))
    (if (inf $0 "java.util.List")
        (.set $0 (parseInt $1) $2)))

(/--
    (ext.fn.Math.sub $0 $1))
(/-+
    (ext.fn.Math.add $0 $1))
(/-*
    (ext.fn.Math.multiply $0 $1))
(/-~
    (ext.fn.Math.divide $0 $1))

(/-doMath
     (if (not (def? $0))
         (return 0))
     (if (not (bl $1))
         (return 0))
     (if (< (len $1) 2)
        (return (get $1 0i)))
     (def op $0)
     (def result (get $1 0i))
     (foreach (subList $1 1i (parseInt (len $1)))
         /sum)
     (/sum
         (share result (op (as result) $0)))
     result)

(/-
   (-doMath /-- $args))
(/+
   (-doMath /-+ $args))
(/*
   (-doMath /-* $args))
(/~
   (-doMath /-~ $args))


(/array:class:initSize
	(as (java.lang.reflect.Array.newInstance class (parseInt initSize))))

(/toFmtStr:obj
	(lava.util.StringUtil.toFmtString (asObj obj) (array int 0)))	
	
(/apply:obj:*fn
	(foreach fn	
		(/:sub
			(share obj (sub obj))))
	obj)
	
(/dataKeys:codeId
	(def code
		(.get $codes (asObj codeId)))
	(.getValue code))
	
(/reload:codeId
	(def code
		(.get $codes (asObj codeId)))
	(def packagePath (. code 'packagePath'))
	(def filePath (. code 'filePath'))
	(.put $codes
	    (asObj codeId)
	    (asObj (new 'lava.core.Code'
            	        packagePath filePath (as 'java.lang.String' ())))))


(/getFileText:filePath
    (lava.util.FileUtil.readFile filePath))
	
(/cls
	(.waitFor (.start ( .inheritIO (new 'java.lang.ProcessBuilder' (as 'java.util.List' ["cmd" "/c" "cls"])) )))))



(export
/cls
/getFileText
/reload /dataKeys
/array /apply /toFmtStr
/parseInt
/get /set
/+ /- /* /~ 
/len  /sort /bl
/newStrBuilder /newRuntimeException
/eq 
/getClipboardText  /setClipboardText
/exit /inf /asObj
/getDoc /comp /println /time /cal /str
true false
/join /print
/> /< /= />= /<= newLine
doc

)










