(use 'core.const')

(def doc (getDoc))

(def -se 
	(.getEngineByName
		 (new 'javax.script.ScriptEngineManager') "JavaScript"))

(doc
(/cal:express 
	(.eval -se express))

`(cal 1+2+4)
7
`)		 


(def -out (. (str System '.out')))

(doc
(/println:*strs 
	(.println -out (str *strs)))
	
`(println 1 2 'str')
12str\n
`
)
	
(doc
(/print:*strs 
	(.print -out (str *strs)))

`(print 1 2 'str')
12str
`
)

(doc
(/str:*objs
	(join objs))
	
`(str 1 'str')
1str
`
)

(doc
(/join:objs:obj
	(def sb (new StringBuilder))
	(foreach objs
		(/:item
			(if obj
				(.append sb	
					(java.lang.String.valueOf (as Object obj))))
			(.append sb 
				(java.lang.String.valueOf (as Object item)))))
	(.toString sb))

'(join [1 2 3] "+")
1+2+3
'
)

(/not:boolean
	(if boolean
		()
		(and 1)))

(/time:sub:*args
	(if (not (def? sub))
		(return (java.lang.System.currentTimeMillis)))
	(def time1 (time))
	(def value)
	(if (def? args)
		(= value (sub *args))
		(= value (sub)))
	
	(def time2 (time))
	(println (cal `{time2} - {time1}`))
	
	value
)


(/comp:a:b
	(def res (str (cal `{a} - {b}`)))
	(? (.substring res 0i 1i)
		"-" -1
		"0" 0
		1))

(/>:a:b
	(? (comp a b)
		1 (and 1)
		()))
		
(/<>:a:b
	(? (comp a b)
		0 (and 1)
		()))		

(/<:a:b
	(? (comp a b)
		-1 (and 1)
		()))
	
(/<=:a:b
	(? (comp a b)
		-1 (and 1)
		0 (and 1)
		()))
		
(/>=:a:b
	(? (comp a b)
		1 (and 1)
		0 (and 1)
		()))
	
(/asObj:obj
	(as 'java.lang.Object' obj))	

(/exit:status
    (if (not (def? status))
        (def status 0i))
    (java.lang.System.exit status))

(/getDoc
	(def docMap {})
	(/doc:key:*value
	    'doc for function or text'
		(if (def? key)
			(if (def? value)
				(.put docMap (asObj key)
					(asObj (str key newLine (join value newLine))))
				(.get docMap (asObj key)))
			(.keySet docMap))))


(/inf:obj:className
    'like java keyword instanceof

    (inf #anyObjecct# #a String of class full name#)
    return Boolean

    '
    (.isInstance (type (as className ())) (as 'java.lang.Object' obj)))


(/setClipboardText:str
       "设置系统剪贴板内容"
       (.setContents (as 'sun.awt.datatransfer.SunClipboard' (.getSystemClipboard (java.awt.Toolkit.getDefaultToolkit)))
            (as 'java.awt.datatransfer.Transferable' (new 'java.awt.datatransfer.StringSelection' (str str)))
             (as 'java.awt.datatransfer.ClipboardOwner' ())))
(/getClipboardText
    "获取系统剪贴板内容"
    (def clipTf
            (.getContents (.getSystemClipboard (java.awt.Toolkit.getDefaultToolkit)) ()))
    (if (and clipTf (.isDataFlavorSupported clipTf (. 'java.awt.datatransfer.DataFlavor.stringFlavor')))
        (.getTransferData clipTf (. 'java.awt.datatransfer.DataFlavor.stringFlavor'))))


(/len
    (if (not (def? $0)) (throw  "can not get len from undefined"))
    (if (inf $0 'java.lang.String')
        (do
            (as 'java.lang.String' $0)
            (str (.length $0)))
        (if (inf $0 'java.util.Collection')
            (do
                (as 'java.util.Collection' $0)
                (str (.size $0)))
            (if (inf $0 'java.util.Map')
                (do
                     (as 'java.util.Map' $0)
                     (str (.size $0)))
                (throw  "can not get len from this object")))))

(/do $-1)

(/parseInt
    (if (inf $0 'java.lang.String')
        (java.lang.Integer.parseInt (as $0))
        $0))

(/asInt:arg
	(as 'int' arg))
		
(/subList
    (.subList $0 $1 $2))

(/sort:arr
    (if (not (def? arr))
        (return))
    (for (/:i
        (for (/:j
            (if (> (get arr j) (get arr (+ j 1)))
                (do
                    (def temp (get arr j))
                    (set arr j (get arr (+ j 1)))
                    (set arr (+ j 1) temp)))) 
			0 (- (len arr) (+ i 2))))
		0 (- (len arr) 2))
    arr)

(/get:obj:key
    (if (== obj ())
        (return ()))
    (if (inf obj "java.util.Map")
        (return (.get obj (as "java.lang.Object" key))))
    (if (catch
            (if (inf obj "java.util.List")
                     (return (.get obj (parseInt (str key))))))
        (return ())))

(/set:obj:key:value
    (if (== obj ())
        (return ()))
    (= value (as "java.lang.Object" value))
    (if (inf obj "java.util.List")
        (.set obj (parseInt key) value))
    (if (inf obj "java.util.Map")
        (.put obj (parseInt key) value))
    obj)

(/add:list:*args
    (if (or (== list ()) (== args ()))
        (return list))
    (.addAll list (as 'java.util.Collection' args))
    list)

(/put:map:*args
    (if (or (== map ()) (== args ()))
        (return map))
    (def index 0)
    (/doSub:i
        (= index (+ i 2))
        (.put map (get args i) (get args (+ i 1))))
    (for /doSub 0 2 (.size args))
    (if (not (== (get args index) ()))
        (.put map (get args index) (asObj ())))
    map)

(/doMath:oper:first:*elems
	(if (not (and oper first elems))
		(throw 'doMath args invalid'))
	(def result first)
	(foreach elems
		(/:i
			(= result (oper result i))))
	result)

(/+:*elems
	(doMath
		(/:a:b
			(str (.add (new 'java.math.BigDecimal' (str a)) (new 'java.math.BigDecimal' (str b))))
		) *elems))
(/-:*elems
	(doMath
		(/:a:b
			(str (.subtract (new 'java.math.BigDecimal' (str a)) (new 'java.math.BigDecimal' (str b))))
		) *elems))
(/*:*elems
	(doMath
		(/:a:b
			(str (.multiply (new 'java.math.BigDecimal' (str a)) (new 'java.math.BigDecimal' (str b))))
		) *elems))
(/~:*elems
	(doMath
		(/:a:b
			(str (.divide (new 'java.math.BigDecimal' (str a)) (new 'java.math.BigDecimal' (str b))))
		) *elems))


(/array:class:initSize
	(as (java.lang.reflect.Array.newInstance class (parseInt initSize))))

(/toFmtStr:obj
	(lava.util.StringUtil.toFmtString (asObj obj) (array (type (as 'int' '')) 0)))
	
(/apply:obj:*fn
	(foreach fn	
		(/:sub
			(= obj (sub obj))))
	obj)
	
(/dataKeys:codeId
	(def code
		(.get $codes (asObj codeId)))
	(.getValue code))
	
(/reload:codeId
	(def code
		(.get $codes (asObj codeId)))
	(def packagePath (. code 'packagePath'))
	(def filePath (. code 'filePath'))
	(.put $codes
	    (asObj codeId)
	    (asObj (new 'lava.core.Code'
            	        packagePath filePath (as 'java.lang.String' ())))))


(/getFileText:filePath
    (lava.util.FileUtil.readFile filePath))
	
(/cls
	(.waitFor (.start ( .inheritIO (new 'java.lang.ProcessBuilder' (as 'java.util.List' ["cmd" "/c" "cls"])) )))))

(def scanner (new 'java.util.Scanner' (. 'java.lang.System.in')))
(/nextLine
	(str (.nextLine scanner))
)

(export
/add /put
/nextLine
/cls /not
/getFileText
/reload /dataKeys
/array /apply /toFmtStr
/parseInt
/get /set
/+ /- /* /~ 
/len  /sort
/getClipboardText  /setClipboardText
/exit /inf /asObj
/getDoc /comp /println /time /cal /str
/join /print
/> /< /<> />= /<= newLine
doc

)










